{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open To Close API Python Client","text":"<p>A comprehensive Python client library for the Open To Close API, providing easy-to-use interfaces for all API endpoints with full type safety and documentation.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation - Get started in minutes</li> <li>Quick Start Guide - 5-minute tutorial</li> <li>API Reference - Complete API documentation</li> <li>Examples - Comprehensive usage examples</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#features","title":"Features","text":"<p>\u2705 Complete API Coverage - All Open To Close API endpoints supported \u2705 Type Safety - Full type hints and validation \u2705 Comprehensive Documentation - Google-style docstrings with examples \u2705 Error Handling - Detailed exception handling with specific error types \u2705 Easy Authentication - Environment variable or direct API key support \u2705 Pagination Support - Automatic handling of paginated results \u2705 Rate Limiting - Built-in rate limit handling  </p>"},{"location":"#supported-endpoints","title":"Supported Endpoints","text":"<ul> <li>Agents - Manage real estate agents</li> <li>Contacts - Handle customer contacts</li> <li>Properties - Property management</li> <li>Property Relations - Documents, emails, notes, tasks, and contacts</li> <li>Teams - Team management</li> <li>Tags - Tagging system</li> <li>Users - User management</li> </ul>"},{"location":"#organization","title":"Organization","text":"<ul> <li>Organization: The Perry Group</li> <li>Author: John Perry</li> <li>Email: john@theperry.group</li> <li>License: MIT License</li> </ul>"},{"location":"#latest-updates","title":"Latest Updates","text":"<p>See Changelog for version history and updates.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See Contributing Guide for development setup and guidelines. </p>"},{"location":"README_DOCUMENTATION/","title":"Open To Close API Documentation Setup","text":"<p>This directory contains the complete documentation setup for the Open To Close API Python client using MkDocs with Material theme.</p>"},{"location":"README_DOCUMENTATION/#setup-overview","title":"Setup Overview","text":"<p>The documentation system includes:</p> <ul> <li>MkDocs with Material theme for beautiful, responsive documentation</li> <li>Custom CSS for real estate industry appropriate styling</li> <li>Custom JavaScript for enhanced functionality (copy buttons, API badges, etc.)</li> <li>Multiple plugins for enhanced features</li> </ul>"},{"location":"README_DOCUMENTATION/#files-structure","title":"Files Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 README_DOCUMENTATION.md    # This file\n\u251c\u2500\u2500 index.md                   # Home page\n\u251c\u2500\u2500 installation.md            # Installation guide\n\u251c\u2500\u2500 quickstart.md             # Quick start guide\n\u251c\u2500\u2500 examples.md               # Usage examples\n\u251c\u2500\u2500 api-reference.md          # Complete API reference\n\u251c\u2500\u2500 troubleshooting.md        # Troubleshooting guide\n\u251c\u2500\u2500 contributing.md           # Contributing guidelines\n\u251c\u2500\u2500 changelog.md              # Release notes\n\u251c\u2500\u2500 deployment.md             # Deployment guide\n\u251c\u2500\u2500 stylesheets/\n\u2502   \u2514\u2500\u2500 extra.css             # Custom CSS with real estate theme\n\u2514\u2500\u2500 javascripts/\n    \u2514\u2500\u2500 extra.js              # Custom JavaScript enhancements\n</code></pre>"},{"location":"README_DOCUMENTATION/#building-documentation","title":"Building Documentation","text":""},{"location":"README_DOCUMENTATION/#prerequisites","title":"Prerequisites","text":"<p>Install the documentation dependencies:</p> <pre><code>pip install -r requirements-dev.txt\n</code></pre>"},{"location":"README_DOCUMENTATION/#local-development","title":"Local Development","text":"<p>To serve the documentation locally with auto-reload:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation will be available at http://localhost:8000</p>"},{"location":"README_DOCUMENTATION/#build-static-site","title":"Build Static Site","text":"<p>To build the static documentation site:</p> <pre><code>mkdocs build\n</code></pre> <p>This creates a <code>site/</code> directory with the built documentation.</p>"},{"location":"README_DOCUMENTATION/#configuration","title":"Configuration","text":"<p>The main configuration is in <code>mkdocs.yml</code> at the project root. Key features:</p>"},{"location":"README_DOCUMENTATION/#theme-configuration","title":"Theme Configuration","text":"<ul> <li>Material theme with green color scheme (real estate appropriate)</li> <li>Dark/light mode toggle</li> <li>Navigation tabs and sections</li> <li>Search functionality with highlighting</li> </ul>"},{"location":"README_DOCUMENTATION/#custom-styling","title":"Custom Styling","text":"<ul> <li>Real estate themed colors using CSS custom properties</li> <li>API endpoint badges with color coding (GET, POST, PUT, DELETE)</li> <li>Property example highlighting for real estate specific content</li> <li>Enhanced code blocks with copy functionality</li> </ul>"},{"location":"README_DOCUMENTATION/#javascript-enhancements","title":"JavaScript Enhancements","text":"<ul> <li>Copy to clipboard buttons on all code blocks</li> <li>API method badges automatically added to headings</li> <li>Smooth scrolling for anchor links</li> <li>Status badges for API availability</li> <li>Table of contents highlighting</li> <li>Property example highlighting</li> </ul>"},{"location":"README_DOCUMENTATION/#plugins","title":"Plugins","text":"<ul> <li>Search with advanced separator configuration</li> <li>Include markdown for content reuse</li> <li>Minify for optimized builds</li> <li>Version management with mike</li> </ul>"},{"location":"README_DOCUMENTATION/#customization","title":"Customization","text":""},{"location":"README_DOCUMENTATION/#colors-and-theming","title":"Colors and Theming","text":"<p>The CSS custom properties in <code>docs/stylesheets/extra.css</code> define the color scheme:</p> <pre><code>:root {\n  --otc-primary: #2e7d32;    /* Primary green */\n  --otc-secondary: #4caf50;  /* Secondary green */\n  --otc-accent: #81c784;     /* Accent green */\n  --otc-dark: #1b5e20;       /* Dark green */\n  --otc-light: #c8e6c9;      /* Light green */\n}\n</code></pre>"},{"location":"README_DOCUMENTATION/#adding-new-features","title":"Adding New Features","text":"<p>To add new JavaScript functionality, modify <code>docs/javascripts/extra.js</code>. The file includes: - Utility functions for DOM manipulation - Event listeners for enhanced interactivity - Automatic enhancement of content</p>"},{"location":"README_DOCUMENTATION/#deployment","title":"Deployment","text":""},{"location":"README_DOCUMENTATION/#github-pages","title":"GitHub Pages","text":"<p>The configuration includes settings for GitHub Pages deployment:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"README_DOCUMENTATION/#version-management","title":"Version Management","text":"<p>Use mike for version management:</p> <pre><code># Deploy latest version\nmike deploy --push --update-aliases 1.0 latest\n\n# Set default version\nmike set-default --push latest\n</code></pre>"},{"location":"README_DOCUMENTATION/#documentation-standards","title":"Documentation Standards","text":"<p>Following the ReZEN Documentation Process:</p> <ol> <li>Google-style docstrings for all public methods</li> <li>Comprehensive type hints throughout</li> <li>Real-world examples in all documentation</li> <li>Detailed error handling documentation</li> <li>Automatic documentation updates with code changes</li> </ol>"},{"location":"README_DOCUMENTATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"README_DOCUMENTATION/#common-issues","title":"Common Issues","text":"<ol> <li>Build Errors: Check that all markdown files exist and links are valid</li> <li>Icon Issues: Ensure icon names are correct for Material theme</li> <li>Plugin Errors: Verify all plugins are installed via requirements-dev.txt</li> </ol>"},{"location":"README_DOCUMENTATION/#missing-files","title":"Missing Files","text":"<p>If you get missing file errors, ensure all files referenced in the navigation exist: - index.md - installation.md - quickstart.md - examples.md - api-reference.md - troubleshooting.md - contributing.md - changelog.md - deployment.md</p>"},{"location":"README_DOCUMENTATION/#contributing-to-documentation","title":"Contributing to Documentation","text":"<ol> <li>Edit markdown files in the <code>docs/</code> directory</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Build and verify with <code>mkdocs build</code></li> <li>Follow naming conventions for consistency</li> <li>Add examples for all new features</li> <li>Update navigation in mkdocs.yml if adding new pages</li> </ol>"},{"location":"README_DOCUMENTATION/#support","title":"Support","text":"<p>For documentation issues: - Check this README - Review the MkDocs Material documentation - Contact: john@theperry.group</p> <p>Documentation system built for The Perry Group's Open To Close API \ud83c\udfe0\ud83d\udcda </p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete reference for all Open To Close API client methods.</p>"},{"location":"api-reference/#client-initialization","title":"Client Initialization","text":""},{"location":"api-reference/#opentocloseapi","title":"OpenToCloseAPI","text":"<pre><code>from open_to_close_api import OpenToCloseAPI\n\nclient = OpenToCloseAPI(\n    api_key: Optional[str] = None,\n    base_url: Optional[str] = None\n)\n</code></pre> <p>Parameters: - <code>api_key</code> (str, optional): API key for authentication. If not provided, loads from <code>OPEN_TO_CLOSE_API_KEY</code> environment variable. - <code>base_url</code> (str, optional): Base URL for the API. Defaults to production URL.</p>"},{"location":"api-reference/#agents-api","title":"Agents API","text":""},{"location":"api-reference/#clientagents","title":"client.agents","text":"<p>Manage real estate agents in the system.</p>"},{"location":"api-reference/#list_agentsparamsnone","title":"list_agents(params=None)","text":"<p>Retrieve a list of agents.</p> <p>Parameters: - <code>params</code> (dict, optional): Query parameters for filtering</p> <p>Returns: <code>List[Dict[str, Any]]</code> - List of agent objects</p> <p>Example: <pre><code># Get all agents\nagents = client.agents.list_agents()\n\n# Filter agents\nagents = client.agents.list_agents(params={\"limit\": 50, \"active\": True})\n</code></pre></p>"},{"location":"api-reference/#create_agentagent_data","title":"create_agent(agent_data)","text":"<p>Create a new agent.</p> <p>Parameters: - <code>agent_data</code> (dict): Agent information</p> <p>Returns: <code>Dict[str, Any]</code> - Created agent object</p> <p>Example: <pre><code>agent = client.agents.create_agent({\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+1234567890\",\n    \"license_number\": \"ABC123\"\n})\n</code></pre></p>"},{"location":"api-reference/#retrieve_agentagent_id","title":"retrieve_agent(agent_id)","text":"<p>Retrieve a specific agent by ID.</p> <p>Parameters: - <code>agent_id</code> (int): Agent ID</p> <p>Returns: <code>Dict[str, Any]</code> - Agent object</p>"},{"location":"api-reference/#update_agentagent_id-agent_data","title":"update_agent(agent_id, agent_data)","text":"<p>Update an existing agent.</p> <p>Parameters: - <code>agent_id</code> (int): Agent ID - <code>agent_data</code> (dict): Fields to update</p> <p>Returns: <code>Dict[str, Any]</code> - Updated agent object</p>"},{"location":"api-reference/#delete_agentagent_id","title":"delete_agent(agent_id)","text":"<p>Delete an agent.</p> <p>Parameters: - <code>agent_id</code> (int): Agent ID</p> <p>Returns: <code>Dict[str, Any]</code> - API response</p>"},{"location":"api-reference/#contacts-api","title":"Contacts API","text":""},{"location":"api-reference/#clientcontacts","title":"client.contacts","text":"<p>Manage customer contacts.</p>"},{"location":"api-reference/#list_contactsparamsnone","title":"list_contacts(params=None)","text":"<p>Retrieve a list of contacts.</p> <p>Parameters: - <code>params</code> (dict, optional): Query parameters</p> <p>Returns: <code>List[Dict[str, Any]]</code> - List of contact objects</p>"},{"location":"api-reference/#create_contactcontact_data","title":"create_contact(contact_data)","text":"<p>Create a new contact.</p> <p>Parameters: - <code>contact_data</code> (dict): Contact information</p> <p>Returns: <code>Dict[str, Any]</code> - Created contact object</p> <p>Example: <pre><code>contact = client.contacts.create_contact({\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Smith\",\n    \"email\": \"jane@example.com\",\n    \"phone\": \"+1987654321\"\n})\n</code></pre></p>"},{"location":"api-reference/#retrieve_contactcontact_id","title":"retrieve_contact(contact_id)","text":"<p>Retrieve a specific contact by ID.</p> <p>Parameters: - <code>contact_id</code> (int): Contact ID</p> <p>Returns: <code>Dict[str, Any]</code> - Contact object</p>"},{"location":"api-reference/#update_contactcontact_id-contact_data","title":"update_contact(contact_id, contact_data)","text":"<p>Update an existing contact.</p> <p>Parameters: - <code>contact_id</code> (int): Contact ID - <code>contact_data</code> (dict): Fields to update</p> <p>Returns: <code>Dict[str, Any]</code> - Updated contact object</p>"},{"location":"api-reference/#delete_contactcontact_id","title":"delete_contact(contact_id)","text":"<p>Delete a contact.</p> <p>Parameters: - <code>contact_id</code> (int): Contact ID</p> <p>Returns: <code>Dict[str, Any]</code> - API response</p>"},{"location":"api-reference/#properties-api","title":"Properties API","text":""},{"location":"api-reference/#clientproperties","title":"client.properties","text":"<p>Manage properties in the system.</p>"},{"location":"api-reference/#list_propertiesparamsnone","title":"list_properties(params=None)","text":"<p>Retrieve a list of properties.</p> <p>Parameters: - <code>params</code> (dict, optional): Query parameters</p> <p>Returns: <code>List[Dict[str, Any]]</code> - List of property objects</p>"},{"location":"api-reference/#create_propertyproperty_data","title":"create_property(property_data)","text":"<p>Create a new property.</p> <p>Parameters: - <code>property_data</code> (dict): Property information</p> <p>Returns: <code>Dict[str, Any]</code> - Created property object</p> <p>Example: <pre><code>property = client.properties.create_property({\n    \"address\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zip_code\": \"12345\",\n    \"property_type\": \"single_family\"\n})\n</code></pre></p>"},{"location":"api-reference/#retrieve_propertyproperty_id","title":"retrieve_property(property_id)","text":"<p>Retrieve a specific property by ID.</p>"},{"location":"api-reference/#update_propertyproperty_id-property_data","title":"update_property(property_id, property_data)","text":"<p>Update an existing property.</p>"},{"location":"api-reference/#delete_propertyproperty_id","title":"delete_property(property_id)","text":"<p>Delete a property.</p>"},{"location":"api-reference/#property-documents-api","title":"Property Documents API","text":""},{"location":"api-reference/#clientproperty_documents","title":"client.property_documents","text":"<p>Manage documents associated with properties.</p>"},{"location":"api-reference/#list_property_documentsproperty_id-paramsnone","title":"list_property_documents(property_id, params=None)","text":"<p>List documents for a specific property.</p> <p>Parameters: - <code>property_id</code> (int): Property ID - <code>params</code> (dict, optional): Query parameters</p> <p>Returns: <code>List[Dict[str, Any]]</code> - List of document objects</p>"},{"location":"api-reference/#create_property_documentproperty_id-document_data","title":"create_property_document(property_id, document_data)","text":"<p>Create a new document for a property.</p> <p>Parameters: - <code>property_id</code> (int): Property ID - <code>document_data</code> (dict): Document information</p> <p>Returns: <code>Dict[str, Any]</code> - Created document object</p> <p>Example: <pre><code>document = client.property_documents.create_property_document(123, {\n    \"title\": \"Purchase Agreement\",\n    \"description\": \"Signed purchase agreement\",\n    \"document_type\": \"contract\",\n    \"file_url\": \"https://example.com/document.pdf\"\n})\n</code></pre></p>"},{"location":"api-reference/#retrieve_property_documentproperty_id-document_id","title":"retrieve_property_document(property_id, document_id)","text":"<p>Retrieve a specific document.</p>"},{"location":"api-reference/#update_property_documentproperty_id-document_id-document_data","title":"update_property_document(property_id, document_id, document_data)","text":"<p>Update a document.</p>"},{"location":"api-reference/#delete_property_documentproperty_id-document_id","title":"delete_property_document(property_id, document_id)","text":"<p>Delete a document.</p>"},{"location":"api-reference/#property-emails-api","title":"Property Emails API","text":""},{"location":"api-reference/#clientproperty_emails","title":"client.property_emails","text":"<p>Manage emails related to properties.</p>"},{"location":"api-reference/#list_property_emailsproperty_id-paramsnone","title":"list_property_emails(property_id, params=None)","text":"<p>List emails for a property.</p>"},{"location":"api-reference/#create_property_emailproperty_id-email_data","title":"create_property_email(property_id, email_data)","text":"<p>Create a new email record.</p> <p>Example: <pre><code>email = client.property_emails.create_property_email(123, {\n    \"subject\": \"Property Update\",\n    \"body\": \"Status update on the property\",\n    \"to_email\": \"client@example.com\",\n    \"from_email\": \"agent@realty.com\"\n})\n</code></pre></p>"},{"location":"api-reference/#property-notes-api","title":"Property Notes API","text":""},{"location":"api-reference/#clientproperty_notes","title":"client.property_notes","text":"<p>Manage notes for properties.</p>"},{"location":"api-reference/#list_property_notesproperty_id-paramsnone","title":"list_property_notes(property_id, params=None)","text":"<p>List notes for a property.</p>"},{"location":"api-reference/#create_property_noteproperty_id-note_data","title":"create_property_note(property_id, note_data)","text":"<p>Create a new note.</p> <p>Example: <pre><code>note = client.property_notes.create_property_note(123, {\n    \"title\": \"Inspection Notes\",\n    \"content\": \"Property inspection completed successfully\",\n    \"note_type\": \"inspection\"\n})\n</code></pre></p>"},{"location":"api-reference/#property-tasks-api","title":"Property Tasks API","text":""},{"location":"api-reference/#clientproperty_tasks","title":"client.property_tasks","text":"<p>Manage tasks related to properties.</p>"},{"location":"api-reference/#list_property_tasksproperty_id-paramsnone","title":"list_property_tasks(property_id, params=None)","text":"<p>List tasks for a property.</p>"},{"location":"api-reference/#create_property_taskproperty_id-task_data","title":"create_property_task(property_id, task_data)","text":"<p>Create a new task.</p> <p>Example: <pre><code>task = client.property_tasks.create_property_task(123, {\n    \"title\": \"Schedule Inspection\",\n    \"description\": \"Coordinate property inspection\",\n    \"due_date\": \"2024-12-31\",\n    \"priority\": \"high\"\n})\n</code></pre></p>"},{"location":"api-reference/#property-contacts-api","title":"Property Contacts API","text":""},{"location":"api-reference/#clientproperty_contacts","title":"client.property_contacts","text":"<p>Manage contact relationships with properties.</p>"},{"location":"api-reference/#list_property_contactsproperty_id-paramsnone","title":"list_property_contacts(property_id, params=None)","text":"<p>List contacts associated with a property.</p>"},{"location":"api-reference/#create_property_contactproperty_id-contact_data","title":"create_property_contact(property_id, contact_data)","text":"<p>Associate a contact with a property.</p>"},{"location":"api-reference/#teams-api","title":"Teams API","text":""},{"location":"api-reference/#clientteams","title":"client.teams","text":"<p>Manage teams in the organization.</p>"},{"location":"api-reference/#list_teamsparamsnone","title":"list_teams(params=None)","text":"<p>List all teams.</p>"},{"location":"api-reference/#create_teamteam_data","title":"create_team(team_data)","text":"<p>Create a new team.</p> <p>Example: <pre><code>team = client.teams.create_team({\n    \"name\": \"Downtown Sales Team\",\n    \"description\": \"Handles downtown area sales\",\n    \"manager_id\": 123\n})\n</code></pre></p>"},{"location":"api-reference/#tags-api","title":"Tags API","text":""},{"location":"api-reference/#clienttags","title":"client.tags","text":"<p>Manage tags for organizing resources.</p>"},{"location":"api-reference/#list_tagsparamsnone","title":"list_tags(params=None)","text":"<p>List all tags.</p>"},{"location":"api-reference/#create_tagtag_data","title":"create_tag(tag_data)","text":"<p>Create a new tag.</p> <p>Example: <pre><code>tag = client.tags.create_tag({\n    \"name\": \"First Time Buyer\",\n    \"color\": \"#FF5733\",\n    \"category\": \"client_type\"\n})\n</code></pre></p>"},{"location":"api-reference/#users-api","title":"Users API","text":""},{"location":"api-reference/#clientusers","title":"client.users","text":"<p>Manage system users.</p>"},{"location":"api-reference/#list_usersparamsnone","title":"list_users(params=None)","text":"<p>List all users.</p>"},{"location":"api-reference/#create_useruser_data","title":"create_user(user_data)","text":"<p>Create a new user.</p> <p>Example: <pre><code>user = client.users.create_user({\n    \"email\": \"newuser@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"role\": \"agent\"\n})\n</code></pre></p>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>All methods can raise the following exceptions:</p> <ul> <li><code>OpenToCloseAPIError</code>: Base exception for all API errors</li> <li><code>AuthenticationError</code>: Invalid or missing API key</li> <li><code>ValidationError</code>: Invalid request data</li> <li><code>NotFoundError</code>: Resource not found (404)</li> <li><code>RateLimitError</code>: API rate limit exceeded</li> <li><code>ServerError</code>: Server error (5xx status codes)</li> <li><code>NetworkError</code>: Network connectivity issues</li> </ul> <p>Example: <pre><code>from open_to_close_api import NotFoundError, ValidationError\n\ntry:\n    contact = client.contacts.retrieve_contact(999999)\nexcept NotFoundError:\n    print(\"Contact does not exist\")\nexcept ValidationError as e:\n    print(f\"Invalid request: {e}\")\n</code></pre></p>"},{"location":"api-reference/#pagination","title":"Pagination","text":"<p>For endpoints that return lists, you can use pagination parameters:</p> <pre><code># Get first page with 50 items\ncontacts = client.contacts.list_contacts(params={\n    \"limit\": 50,\n    \"offset\": 0\n})\n\n# Get second page\ncontacts = client.contacts.list_contacts(params={\n    \"limit\": 50,\n    \"offset\": 50\n})\n</code></pre>"},{"location":"api-reference/#filtering-and-searching","title":"Filtering and Searching","text":"<p>Many list endpoints support filtering and search parameters:</p> <pre><code># Filter contacts by email domain\ncontacts = client.contacts.list_contacts(params={\n    \"email__contains\": \"@example.com\"\n})\n\n# Search properties by address\nproperties = client.properties.list_properties(params={\n    \"search\": \"Main Street\"\n})\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the Open To Close API Python Client will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Comprehensive documentation structure following ReZEN model</li> <li>Advanced error handling patterns with retry logic</li> <li>Bulk operation examples and utilities</li> <li>Enhanced troubleshooting guide</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Improved docstring formatting and examples</li> <li>Enhanced type hints throughout codebase</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>None</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>None</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>None</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>None</li> </ul>"},{"location":"changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of Open To Close API Python Client</li> <li>Complete API coverage for all endpoints:</li> <li>Agents API with full CRUD operations</li> <li>Contacts API with full CRUD operations</li> <li>Properties API with full CRUD operations</li> <li>Property Documents API for document management</li> <li>Property Emails API for email tracking</li> <li>Property Notes API for note management</li> <li>Property Tasks API for task management</li> <li>Property Contacts API for relationship management</li> <li>Teams API for team management</li> <li>Tags API for tagging system</li> <li>Users API for user management</li> <li>Comprehensive exception handling with specific error types:</li> <li><code>OpenToCloseAPIError</code> - Base exception</li> <li><code>AuthenticationError</code> - Authentication failures</li> <li><code>ValidationError</code> - Request validation errors</li> <li><code>NotFoundError</code> - Resource not found (404)</li> <li><code>RateLimitError</code> - Rate limit exceeded (429)</li> <li><code>ServerError</code> - Server errors (5xx)</li> <li><code>NetworkError</code> - Network connectivity issues</li> <li>Type safety with comprehensive type hints</li> <li>Google-style docstrings with usage examples</li> <li>Environment variable and .env file support for API keys</li> <li>Base client architecture for extensibility</li> <li>Full test coverage with pytest</li> <li>Comprehensive documentation</li> </ul>"},{"location":"changelog/#implementation-details","title":"Implementation Details","text":"<ul> <li>Built on <code>requests</code> library for HTTP operations</li> <li>Modular architecture with separate client classes for each resource</li> <li>Automatic JSON serialization/deserialization</li> <li>Consistent error handling across all endpoints</li> <li>Support for query parameters and filtering</li> <li>Pagination support for list operations</li> </ul>"},{"location":"changelog/#migration-guide","title":"Migration Guide","text":""},{"location":"changelog/#from-0x-to-100","title":"From 0.x to 1.0.0","text":"<p>This is the initial stable release. No migration needed as this is the first version.</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"changelog/#version-100","title":"Version 1.0.0","text":"<ul> <li>Initial release - no breaking changes as this is the first version</li> </ul>"},{"location":"changelog/#api-compatibility","title":"API Compatibility","text":""},{"location":"changelog/#supported-open-to-close-api-versions","title":"Supported Open To Close API Versions","text":"<ul> <li>v1 (current)</li> </ul>"},{"location":"changelog/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python 3.8+</li> <li>requests &gt;= 2.25.0</li> </ul>"},{"location":"changelog/#development-milestones","title":"Development Milestones","text":""},{"location":"changelog/#100-release-goals","title":"1.0.0 Release Goals \u2705","text":"<ul> <li> Complete endpoint coverage</li> <li> Comprehensive error handling</li> <li> Full type safety</li> <li> Documentation with examples</li> <li> Test coverage</li> <li> CI/CD pipeline</li> <li> PyPI publication</li> </ul>"},{"location":"changelog/#future-roadmap","title":"Future Roadmap","text":""},{"location":"changelog/#version-110-planned","title":"Version 1.1.0 (Planned)","text":"<ul> <li> Async/await support with <code>aiohttp</code></li> <li> Response caching mechanisms</li> <li> Webhook handling utilities</li> <li> Bulk operation optimizations</li> <li> Advanced filtering helpers</li> <li> Rate limiting with automatic backoff</li> </ul>"},{"location":"changelog/#version-120-planned","title":"Version 1.2.0 (Planned)","text":"<ul> <li> CLI tool for common operations</li> <li> Data export/import utilities</li> <li> Real estate workflow templates</li> <li> Integration with popular CRM systems</li> <li> Advanced search capabilities</li> </ul>"},{"location":"changelog/#version-200-future","title":"Version 2.0.0 (Future)","text":"<ul> <li> Support for Open To Close API v2 (when available)</li> <li> Breaking changes for improved API design</li> <li> Enhanced performance optimizations</li> <li> Plugin architecture for extensions</li> </ul>"},{"location":"changelog/#security-updates","title":"Security Updates","text":""},{"location":"changelog/#version-100_1","title":"Version 1.0.0","text":"<ul> <li>Secure API key handling with environment variables</li> <li>No hardcoded credentials in codebase</li> <li>HTTPS-only communication with API</li> <li>Certificate validation enabled by default</li> </ul>"},{"location":"changelog/#performance-notes","title":"Performance Notes","text":""},{"location":"changelog/#version-100_2","title":"Version 1.0.0","text":"<ul> <li>Baseline performance established</li> <li>Connection pooling through requests.Session</li> <li>JSON parsing optimizations</li> <li>Memory-efficient pagination support</li> </ul>"},{"location":"changelog/#known-issues","title":"Known Issues","text":""},{"location":"changelog/#version-100_3","title":"Version 1.0.0","text":"<ul> <li>None reported</li> </ul>"},{"location":"changelog/#contributors","title":"Contributors","text":""},{"location":"changelog/#version-100_4","title":"Version 1.0.0","text":"<ul> <li>John Perry (@johnperry) - Lead Developer</li> <li>The Perry Group Development Team</li> </ul>"},{"location":"changelog/#release-process","title":"Release Process","text":"<ol> <li>Version Planning: Features and fixes are planned for each version</li> <li>Development: Features developed in feature branches</li> <li>Testing: Comprehensive testing including unit and integration tests</li> <li>Documentation: All changes documented with examples</li> <li>Review: Code review and quality assurance</li> <li>Release: Version tagged and published to PyPI</li> <li>Announcement: Release notes and migration guides published</li> </ol>"},{"location":"changelog/#support-policy","title":"Support Policy","text":"<ul> <li>Current Version (1.x): Full support with regular updates</li> <li>Previous Versions: Security updates only</li> <li>Legacy Versions: End of life</li> </ul> <p>For questions about specific versions or upgrade paths, please contact support.</p> <p>Note: This changelog follows the principles of Keep a Changelog and uses Semantic Versioning. Each version clearly indicates the type of changes and their impact on existing code. </p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>We welcome contributions to the Open To Close API Python Client! This guide will help you get started with development, testing, and contributing to the project.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Development Environment</li> <li>Code Standards</li> <li>Testing Guidelines</li> <li>Documentation Standards</li> <li>Submission Process</li> <li>Release Process</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>A GitHub account</li> <li>Open To Close API key for testing</li> </ul>"},{"location":"contributing/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally: <pre><code>git clone https://github.com/YOUR_USERNAME/open-to-close-api.git\ncd open-to-close-api\n</code></pre></p> </li> <li> <p>Add upstream remote: <pre><code>git remote add upstream https://github.com/theperry-group/open-to-close-api.git\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-environment","title":"Development Environment","text":""},{"location":"contributing/#1-create-virtual-environment","title":"1. Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv .venv\n\n# Activate it\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"contributing/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install development dependencies\npip install -r requirements-dev.txt\n\n# Install package in editable mode\npip install -e .\n</code></pre>"},{"location":"contributing/#3-environment-configuration","title":"3. Environment Configuration","text":"<p>Create a <code>.env</code> file for testing:</p> <pre><code>OPEN_TO_CLOSE_API_KEY=your_test_api_key_here\n</code></pre> <p>\u26a0\ufe0f Never commit your API key to version control</p>"},{"location":"contributing/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code># Run basic tests\npython -c \"import open_to_close_api; print('Import successful')\"\n\n# Run test suite\npytest tests/\n</code></pre>"},{"location":"contributing/#code-standards","title":"Code Standards","text":"<p>We follow The Perry Group Python Style Guide outlined in <code>STYLE_GUIDE.md</code>.</p>"},{"location":"contributing/#key-requirements","title":"Key Requirements","text":"<ol> <li> <p>Code Formatting: <pre><code># Format code with Black\nblack .\n\n# Sort imports with isort\nisort .\n</code></pre></p> </li> <li> <p>Type Hints: <pre><code>def create_contact(\n    self, \n    contact_data: Dict[str, Any]\n) -&gt; Dict[str, Any]:\n    \"\"\"Create a new contact.\"\"\"\n    # Implementation\n</code></pre></p> </li> <li> <p>Docstrings: <pre><code>def list_contacts(\n    self, \n    params: Optional[Dict[str, Any]] = None\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"Retrieve a list of contacts.\n\n    Args:\n        params: Optional dictionary of query parameters for filtering\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a contact\n\n    Raises:\n        OpenToCloseAPIError: If the API request fails\n        ValidationError: If parameters are invalid\n        AuthenticationError: If authentication fails\n\n    Example:\n        ```python\n        # Get all contacts\n        contacts = client.contacts.list_contacts()\n\n        # Get contacts with filtering\n        contacts = client.contacts.list_contacts(params={\"limit\": 50})\n        ```\n    \"\"\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Set up pre-commit hooks to automatically format code:</p> <pre><code># Install pre-commit\npip install pre-commit\n\n# Install hooks\npre-commit install\n\n# Run on all files\npre-commit run --all-files\n</code></pre>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"contributing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                    # Unit tests for individual components\n\u2502   \u251c\u2500\u2500 test_base_client.py\n\u2502   \u251c\u2500\u2500 test_agents.py\n\u2502   \u251c\u2500\u2500 test_contacts.py\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 integration/             # Integration tests with real API\n\u2502   \u251c\u2500\u2500 test_full_workflow.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 fixtures/                # Test data and fixtures\n    \u251c\u2500\u2500 sample_responses.json\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":""},{"location":"contributing/#unit-tests","title":"Unit Tests","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom open_to_close_api.contacts import ContactsAPI\nfrom open_to_close_api.exceptions import ValidationError\n\nclass TestContactsAPI:\n    \"\"\"Test suite for ContactsAPI.\"\"\"\n\n    def test_list_contacts_success(self, mock_client):\n        \"\"\"Test successful contact listing.\"\"\"\n        # Arrange\n        mock_response = [{\"id\": 1, \"first_name\": \"John\", \"last_name\": \"Doe\"}]\n        mock_client.get.return_value = mock_response\n\n        contacts_api = ContactsAPI()\n        contacts_api.get = mock_client.get\n\n        # Act\n        result = contacts_api.list_contacts()\n\n        # Assert\n        assert result == mock_response\n        mock_client.get.assert_called_once_with(\"/contacts\", params=None)\n\n    def test_create_contact_validation_error(self, mock_client):\n        \"\"\"Test contact creation with invalid data.\"\"\"\n        # Arrange\n        mock_client.post.side_effect = ValidationError(\"Invalid email format\")\n\n        contacts_api = ContactsAPI()\n        contacts_api.post = mock_client.post\n\n        # Act &amp; Assert\n        with pytest.raises(ValidationError, match=\"Invalid email format\"):\n            contacts_api.create_contact({\"email\": \"invalid-email\"})\n</code></pre>"},{"location":"contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>import pytest\nfrom open_to_close_api import OpenToCloseAPI\n\n@pytest.mark.integration\nclass TestContactsIntegration:\n    \"\"\"Integration tests for contacts API.\"\"\"\n\n    def test_contact_lifecycle(self, api_client):\n        \"\"\"Test complete contact CRUD lifecycle.\"\"\"\n        # Create\n        contact_data = {\n            \"first_name\": \"Test\",\n            \"last_name\": \"User\",\n            \"email\": \"test@example.com\"\n        }\n\n        created_contact = api_client.contacts.create_contact(contact_data)\n        assert created_contact[\"first_name\"] == \"Test\"\n\n        # Read\n        retrieved_contact = api_client.contacts.retrieve_contact(created_contact[\"id\"])\n        assert retrieved_contact[\"email\"] == \"test@example.com\"\n\n        # Update\n        updated_contact = api_client.contacts.update_contact(\n            created_contact[\"id\"], \n            {\"phone\": \"+1234567890\"}\n        )\n        assert updated_contact[\"phone\"] == \"+1234567890\"\n\n        # Delete\n        api_client.contacts.delete_contact(created_contact[\"id\"])\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=open_to_close_api\n\n# Run only unit tests\npytest tests/unit/\n\n# Run only integration tests\npytest tests/integration/\n\n# Run specific test file\npytest tests/unit/test_contacts.py\n\n# Run with verbose output\npytest -v\n\n# Run tests matching pattern\npytest -k \"test_contact\"\n</code></pre>"},{"location":"contributing/#test-configuration","title":"Test Configuration","text":"<p><code>pytest.ini</code>: <pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = --strict-markers --disable-warnings\nmarkers =\n    integration: marks tests as integration tests\n    slow: marks tests as slow\n</code></pre></p>"},{"location":"contributing/#documentation-standards","title":"Documentation Standards","text":""},{"location":"contributing/#documentation-updates-required","title":"Documentation Updates Required","text":"<p>When making code changes, update the corresponding documentation:</p>"},{"location":"contributing/#1-code-changes-docstring-updates","title":"1. Code Changes \u2192 Docstring Updates","text":"<ul> <li>Update Google-format docstrings with new parameters, return types, or behavior</li> <li>Update examples in docstrings</li> <li>Add usage examples for new features</li> </ul>"},{"location":"contributing/#2-new-features-documentation-updates","title":"2. New Features \u2192 Documentation Updates","text":"<ul> <li>Add usage examples to <code>docs/examples.md</code></li> <li>Update <code>docs/api-reference.md</code> with new endpoint documentation</li> <li>Update main <code>README.md</code> if it's a major feature</li> <li>Add troubleshooting information if applicable</li> </ul>"},{"location":"contributing/#3-breaking-changes-migration-documentation","title":"3. Breaking Changes \u2192 Migration Documentation","text":"<ul> <li>Update <code>docs/changelog.md</code> with migration notes</li> <li>Add deprecation warnings and migration guides</li> <li>Update version number in <code>open_to_close_api/__init__.py</code></li> </ul>"},{"location":"contributing/#documentation-checklist","title":"Documentation Checklist","text":"<p>Before submitting a PR:</p> <ul> <li> Updated relevant docstrings</li> <li> Updated examples in affected documentation files</li> <li> Updated API reference if needed</li> <li> Updated changelog if user-facing change</li> <li> Verified all examples still work</li> <li> Updated type hints if signatures changed</li> <li> Added test documentation for new features</li> </ul>"},{"location":"contributing/#submission-process","title":"Submission Process","text":""},{"location":"contributing/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code># Ensure you're on main\ngit checkout main\ngit pull upstream main\n\n# Create feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"contributing/#2-make-changes","title":"2. Make Changes","text":"<ol> <li>Write your code following the style guidelines</li> <li>Add comprehensive tests</li> <li>Update documentation</li> <li>Run the test suite</li> </ol>"},{"location":"contributing/#3-commit-changes","title":"3. Commit Changes","text":"<pre><code># Stage changes\ngit add .\n\n# Commit with descriptive message\ngit commit -m \"Add: New contact filtering capabilities\n\n- Add advanced filtering options for contacts API\n- Include support for date range filtering\n- Add comprehensive tests for new functionality\n- Update documentation with examples\"\n</code></pre>"},{"location":"contributing/#4-quality-checks","title":"4. Quality Checks","text":"<p>Before pushing, run:</p> <pre><code># Code formatting\nblack .\nisort .\n\n# Type checking\nmypy open_to_close_api/\n\n# Linting\nflake8 open_to_close_api/\n\n# Tests\npytest\n\n# Test coverage\npytest --cov=open_to_close_api --cov-report=html\n</code></pre>"},{"location":"contributing/#5-push-and-create-pr","title":"5. Push and Create PR","text":"<pre><code># Push to your fork\ngit push origin feature/your-feature-name\n\n# Create pull request on GitHub\n</code></pre>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":""},{"location":"contributing/#pr-title-format","title":"PR Title Format","text":"<pre><code>Type: Brief description\n\nExamples:\n- Add: Contact filtering by date range\n- Fix: Handle empty response in property list\n- Update: Improve error messages for validation\n- Remove: Deprecated authentication method\n</code></pre>"},{"location":"contributing/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of changes and motivation.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change that fixes an issue)\n- [ ] New feature (non-breaking change that adds functionality)\n- [ ] Breaking change (fix or feature that causes existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] All tests pass locally\n- [ ] Test coverage maintained/improved\n\n## Documentation\n- [ ] Docstrings updated\n- [ ] API reference updated\n- [ ] Examples updated\n- [ ] Changelog updated\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Breaking changes documented\n- [ ] Ready for review\n</code></pre>"},{"location":"contributing/#release-process","title":"Release Process","text":""},{"location":"contributing/#version-management","title":"Version Management","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"contributing/#release-steps","title":"Release Steps","text":"<ol> <li> <p>Update Version Numbers: <pre><code># open_to_close_api/__init__.py\n__version__ = \"1.2.0\"\n</code></pre></p> </li> <li> <p>Update Changelog: <pre><code>## [1.2.0] - 2024-02-01\n\n### Added\n- Advanced contact filtering capabilities\n- Bulk import utilities\n\n### Changed\n- Improved error handling for rate limits\n</code></pre></p> </li> <li> <p>Create Release PR:</p> </li> <li>Update version numbers</li> <li>Update changelog</li> <li> <p>Update documentation</p> </li> <li> <p>Tag Release: <pre><code>git tag -a v1.2.0 -m \"Release version 1.2.0\"\ngit push origin v1.2.0\n</code></pre></p> </li> <li> <p>Publish to PyPI: <pre><code># Build package\npython -m build\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre></p> </li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#development-questions","title":"Development Questions","text":"<ul> <li>Check existing issues</li> <li>Join our developer discussions</li> <li>Contact the maintainers</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting bugs, include: - Python version - Library version - Minimal reproduction case - Error messages and traceback - Expected vs actual behavior</p>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>When requesting features: - Describe the use case - Provide examples of how it would be used - Consider backward compatibility - Suggest implementation approach</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inspiring community for all. Please read and follow our Code of Conduct.</p>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in: - Release notes - Contributors section of README - GitHub contributors list</p> <p>Thank you for contributing to the Open To Close API Python Client! </p>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide covers deployment strategies and hosting options for applications using the Open To Close API Python Client.</p>"},{"location":"deployment/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Production Environment Setup</li> <li>Environment Configuration</li> <li>Docker Deployment</li> <li>Cloud Platform Deployment</li> <li>CI/CD Pipeline</li> <li>Monitoring and Logging</li> <li>Security Considerations</li> <li>Performance Optimization</li> </ul>"},{"location":"deployment/#production-environment-setup","title":"Production Environment Setup","text":""},{"location":"deployment/#python-environment","title":"Python Environment","text":"<pre><code># Create production virtual environment\npython -m venv /opt/app/.venv\nsource /opt/app/.venv/bin/activate\n\n# Install production dependencies\npip install --no-dev open-to-close-api\n\n# Or from requirements.txt\npip install -r requirements.txt\n</code></pre>"},{"location":"deployment/#system-dependencies","title":"System Dependencies","text":"<pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install -y python3-pip python3-venv nginx supervisor\n\n# CentOS/RHEL\nsudo yum install -y python3-pip python3-venv nginx supervisor\n</code></pre>"},{"location":"deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<p>Required: <pre><code>export OPEN_TO_CLOSE_API_KEY=\"your_production_api_key\"\nexport ENVIRONMENT=\"production\"\nexport LOG_LEVEL=\"INFO\"\n</code></pre></p> <p>Optional: <pre><code>export OPEN_TO_CLOSE_BASE_URL=\"https://api.opentoclose.com\"\nexport REQUEST_TIMEOUT=\"30\"\nexport MAX_RETRIES=\"3\"\nexport RATE_LIMIT_ENABLED=\"true\"\n</code></pre></p>"},{"location":"deployment/#configuration-file","title":"Configuration File","text":"<p><code>config/production.py</code>: <pre><code>import os\nfrom typing import Optional\n\nclass ProductionConfig:\n    \"\"\"Production configuration settings.\"\"\"\n\n    # API Configuration\n    OPEN_TO_CLOSE_API_KEY: str = os.getenv(\"OPEN_TO_CLOSE_API_KEY\")\n    OPEN_TO_CLOSE_BASE_URL: str = os.getenv(\n        \"OPEN_TO_CLOSE_BASE_URL\", \n        \"https://api.opentoclose.com\"\n    )\n\n    # Request Configuration\n    REQUEST_TIMEOUT: int = int(os.getenv(\"REQUEST_TIMEOUT\", \"30\"))\n    MAX_RETRIES: int = int(os.getenv(\"MAX_RETRIES\", \"3\"))\n\n    # Logging\n    LOG_LEVEL: str = os.getenv(\"LOG_LEVEL\", \"INFO\")\n    LOG_FORMAT: str = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\n    # Rate Limiting\n    RATE_LIMIT_ENABLED: bool = os.getenv(\"RATE_LIMIT_ENABLED\", \"true\").lower() == \"true\"\n    RATE_LIMIT_CALLS: int = int(os.getenv(\"RATE_LIMIT_CALLS\", \"100\"))\n    RATE_LIMIT_PERIOD: int = int(os.getenv(\"RATE_LIMIT_PERIOD\", \"60\"))\n\n    @classmethod\n    def validate(cls) -&gt; None:\n        \"\"\"Validate required configuration.\"\"\"\n        if not cls.OPEN_TO_CLOSE_API_KEY:\n            raise ValueError(\"OPEN_TO_CLOSE_API_KEY environment variable is required\")\n</code></pre></p>"},{"location":"deployment/#secrets-management","title":"Secrets Management","text":""},{"location":"deployment/#using-hashicorp-vault","title":"Using HashiCorp Vault","text":"<pre><code>import hvac\n\ndef get_api_key_from_vault():\n    \"\"\"Retrieve API key from Vault.\"\"\"\n    client = hvac.Client(url='https://vault.company.com')\n    client.token = os.getenv('VAULT_TOKEN')\n\n    secret = client.secrets.kv.v2.read_secret_version(\n        path='open-to-close/api-key'\n    )\n    return secret['data']['data']['api_key']\n</code></pre>"},{"location":"deployment/#using-aws-secrets-manager","title":"Using AWS Secrets Manager","text":"<pre><code>import boto3\nimport json\n\ndef get_api_key_from_aws():\n    \"\"\"Retrieve API key from AWS Secrets Manager.\"\"\"\n    session = boto3.session.Session()\n    client = session.client(\n        service_name='secretsmanager',\n        region_name='us-west-2'\n    )\n\n    response = client.get_secret_value(SecretId='open-to-close-api-key')\n    secret = json.loads(response['SecretString'])\n    return secret['api_key']\n</code></pre>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app \\\n    &amp;&amp; chown -R app:app /app\nUSER app\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Expose port\nEXPOSE 8000\n\n# Start application\nCMD [\"python\", \"-m\", \"app.main\"]\n</code></pre>"},{"location":"deployment/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - OPEN_TO_CLOSE_API_KEY=${OPEN_TO_CLOSE_API_KEY}\n      - ENVIRONMENT=production\n      - LOG_LEVEL=INFO\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n    restart: unless-stopped\n\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\nvolumes:\n  redis_data:\n</code></pre>"},{"location":"deployment/#building-and-running","title":"Building and Running","text":"<pre><code># Build image\ndocker build -t open-to-close-app .\n\n# Run with environment file\ndocker run --env-file .env -p 8000:8000 open-to-close-app\n\n# Using docker-compose\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/#cloud-platform-deployment","title":"Cloud Platform Deployment","text":""},{"location":"deployment/#aws-deployment","title":"AWS Deployment","text":""},{"location":"deployment/#using-aws-lambda","title":"Using AWS Lambda","text":"<pre><code># lambda_handler.py\nimport json\nimport os\nfrom open_to_close_api import OpenToCloseAPI\n\ndef lambda_handler(event, context):\n    \"\"\"AWS Lambda handler for Open To Close API operations.\"\"\"\n\n    # Initialize client\n    client = OpenToCloseAPI(\n        api_key=os.environ['OPEN_TO_CLOSE_API_KEY']\n    )\n\n    try:\n        # Process request\n        operation = event.get('operation')\n\n        if operation == 'list_contacts':\n            result = client.contacts.list_contacts()\n        elif operation == 'create_contact':\n            result = client.contacts.create_contact(event.get('contact_data'))\n        else:\n            raise ValueError(f\"Unsupported operation: {operation}\")\n\n        return {\n            'statusCode': 200,\n            'body': json.dumps(result)\n        }\n\n    except Exception as e:\n        return {\n            'statusCode': 500,\n            'body': json.dumps({'error': str(e)})\n        }\n</code></pre>"},{"location":"deployment/#using-ecs-fargate","title":"Using ECS Fargate","text":"<pre><code># task-definition.json\n{\n  \"family\": \"open-to-close-app\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"256\",\n  \"memory\": \"512\",\n  \"executionRoleArn\": \"arn:aws:iam::ACCOUNT:role/ecsTaskExecutionRole\",\n  \"taskRoleArn\": \"arn:aws:iam::ACCOUNT:role/ecsTaskRole\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"app\",\n      \"image\": \"your-account.dkr.ecr.region.amazonaws.com/open-to-close-app:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        {\n          \"name\": \"ENVIRONMENT\",\n          \"value\": \"production\"\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"OPEN_TO_CLOSE_API_KEY\",\n          \"valueFrom\": \"arn:aws:secretsmanager:region:account:secret:open-to-close-api-key\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/open-to-close-app\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"deployment/#google-cloud-platform","title":"Google Cloud Platform","text":""},{"location":"deployment/#using-cloud-run","title":"Using Cloud Run","text":"<pre><code># cloudbuild.yaml\nsteps:\n  - name: 'gcr.io/cloud-builders/docker'\n    args:\n      - 'build'\n      - '-t'\n      - 'gcr.io/$PROJECT_ID/open-to-close-app:$COMMIT_SHA'\n      - '.'\n\n  - name: 'gcr.io/cloud-builders/docker'\n    args:\n      - 'push'\n      - 'gcr.io/$PROJECT_ID/open-to-close-app:$COMMIT_SHA'\n\n  - name: 'gcr.io/cloud-builders/gcloud'\n    args:\n      - 'run'\n      - 'deploy'\n      - 'open-to-close-app'\n      - '--image=gcr.io/$PROJECT_ID/open-to-close-app:$COMMIT_SHA'\n      - '--region=us-central1'\n      - '--platform=managed'\n      - '--allow-unauthenticated'\n</code></pre>"},{"location":"deployment/#azure-deployment","title":"Azure Deployment","text":""},{"location":"deployment/#using-container-instances","title":"Using Container Instances","text":"<pre><code># Deploy to Azure Container Instances\naz container create \\\n    --resource-group myResourceGroup \\\n    --name open-to-close-app \\\n    --image your-registry.azurecr.io/open-to-close-app:latest \\\n    --cpu 1 \\\n    --memory 1 \\\n    --ports 8000 \\\n    --environment-variables ENVIRONMENT=production \\\n    --secure-environment-variables OPEN_TO_CLOSE_API_KEY=$API_KEY \\\n    --restart-policy Always\n</code></pre>"},{"location":"deployment/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"deployment/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements-dev.txt\n          pip install -e .\n\n      - name: Run tests\n        run: pytest tests/\n        env:\n          OPEN_TO_CLOSE_API_KEY: ${{ secrets.TEST_API_KEY }}\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: Deploy to ECS\n        run: |\n          aws ecs update-service \\\n            --cluster production \\\n            --service open-to-close-app \\\n            --force-new-deployment\n</code></pre>"},{"location":"deployment/#gitlab-ci","title":"GitLab CI","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - test\n  - build\n  - deploy\n\ntest:\n  stage: test\n  image: python:3.11\n  script:\n    - pip install -r requirements-dev.txt\n    - pip install -e .\n    - pytest tests/\n  variables:\n    OPEN_TO_CLOSE_API_KEY: $TEST_API_KEY\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .\n    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n  only:\n    - main\n\ndeploy:\n  stage: deploy\n  image: alpine:latest\n  script:\n    - apk add --no-cache curl\n    - curl -X POST \"$DEPLOYMENT_WEBHOOK_URL\"\n  only:\n    - main\n</code></pre>"},{"location":"deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/#application-logging","title":"Application Logging","text":"<pre><code>import logging\nimport structlog\nfrom pythonjsonlogger import jsonlogger\n\ndef setup_logging():\n    \"\"\"Configure structured logging for production.\"\"\"\n\n    # Configure structlog\n    structlog.configure(\n        processors=[\n            structlog.stdlib.filter_by_level,\n            structlog.stdlib.add_logger_name,\n            structlog.stdlib.add_log_level,\n            structlog.stdlib.PositionalArgumentsFormatter(),\n            structlog.processors.TimeStamper(fmt=\"iso\"),\n            structlog.processors.StackInfoRenderer(),\n            structlog.processors.format_exc_info,\n            structlog.processors.UnicodeDecoder(),\n            structlog.processors.JSONRenderer()\n        ],\n        context_class=dict,\n        logger_factory=structlog.stdlib.LoggerFactory(),\n        wrapper_class=structlog.stdlib.BoundLogger,\n        cache_logger_on_first_use=True,\n    )\n\n    # Configure standard logging\n    handler = logging.StreamHandler()\n    formatter = jsonlogger.JsonFormatter()\n    handler.setFormatter(formatter)\n\n    root_logger = logging.getLogger()\n    root_logger.addHandler(handler)\n    root_logger.setLevel(logging.INFO)\n\n# Usage in application\nlogger = structlog.get_logger(__name__)\n\ndef process_contacts():\n    \"\"\"Process contacts with structured logging.\"\"\"\n    logger.info(\"Starting contact processing\")\n\n    try:\n        client = OpenToCloseAPI()\n        contacts = client.contacts.list_contacts()\n\n        logger.info(\n            \"Contact processing completed\",\n            contact_count=len(contacts)\n        )\n\n    except Exception as e:\n        logger.error(\n            \"Contact processing failed\",\n            error=str(e),\n            exc_info=True\n        )\n        raise\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<pre><code>from flask import Flask, jsonify\nfrom open_to_close_api import OpenToCloseAPI\nimport time\n\napp = Flask(__name__)\n\n@app.route('/health')\ndef health_check():\n    \"\"\"Comprehensive health check endpoint.\"\"\"\n\n    health_status = {\n        'status': 'healthy',\n        'timestamp': time.time(),\n        'checks': {}\n    }\n\n    # Check API connectivity\n    try:\n        client = OpenToCloseAPI()\n        # Simple API call to verify connectivity\n        client.contacts.list_contacts(params={'limit': 1})\n        health_status['checks']['api_connectivity'] = 'ok'\n    except Exception as e:\n        health_status['status'] = 'unhealthy'\n        health_status['checks']['api_connectivity'] = f'failed: {str(e)}'\n\n    # Check memory usage\n    import psutil\n    memory_percent = psutil.virtual_memory().percent\n    if memory_percent &gt; 90:\n        health_status['status'] = 'unhealthy'\n        health_status['checks']['memory'] = f'high usage: {memory_percent}%'\n    else:\n        health_status['checks']['memory'] = 'ok'\n\n    status_code = 200 if health_status['status'] == 'healthy' else 503\n    return jsonify(health_status), status_code\n</code></pre>"},{"location":"deployment/#metrics-collection","title":"Metrics Collection","text":"<pre><code>from prometheus_client import Counter, Histogram, generate_latest\nimport time\n\n# Metrics\napi_requests_total = Counter(\n    'open_to_close_api_requests_total',\n    'Total API requests',\n    ['method', 'endpoint', 'status']\n)\n\napi_request_duration = Histogram(\n    'open_to_close_api_request_duration_seconds',\n    'API request duration'\n)\n\ndef track_api_call(func):\n    \"\"\"Decorator to track API call metrics.\"\"\"\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n\n        try:\n            result = func(*args, **kwargs)\n            api_requests_total.labels(\n                method='GET',\n                endpoint=func.__name__,\n                status='success'\n            ).inc()\n            return result\n\n        except Exception as e:\n            api_requests_total.labels(\n                method='GET',\n                endpoint=func.__name__,\n                status='error'\n            ).inc()\n            raise\n\n        finally:\n            duration = time.time() - start_time\n            api_request_duration.observe(duration)\n\n    return wrapper\n</code></pre>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#network-security","title":"Network Security","text":"<pre><code># nginx.conf - SSL/TLS configuration\nserver {\n    listen 443 ssl http2;\n    server_name api.yourcompany.com;\n\n    ssl_certificate /etc/nginx/ssl/cert.pem;\n    ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n    # Security headers\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options DENY;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req zone=api burst=20 nodelay;\n\n    location / {\n        proxy_pass http://app:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"deployment/#api-key-rotation","title":"API Key Rotation","text":"<pre><code>class APIKeyManager:\n    \"\"\"Manage API key rotation and validation.\"\"\"\n\n    def __init__(self):\n        self.current_key = os.getenv('OPEN_TO_CLOSE_API_KEY')\n        self.backup_key = os.getenv('OPEN_TO_CLOSE_API_KEY_BACKUP')\n\n    def get_working_key(self):\n        \"\"\"Get a working API key with fallback.\"\"\"\n\n        # Try current key first\n        client = OpenToCloseAPI(api_key=self.current_key)\n        try:\n            client.contacts.list_contacts(params={'limit': 1})\n            return self.current_key\n        except AuthenticationError:\n            logger.warning(\"Primary API key failed, trying backup\")\n\n        # Try backup key\n        if self.backup_key:\n            client = OpenToCloseAPI(api_key=self.backup_key)\n            try:\n                client.contacts.list_contacts(params={'limit': 1})\n                return self.backup_key\n            except AuthenticationError:\n                logger.error(\"Both API keys failed\")\n                raise\n\n        raise AuthenticationError(\"No working API key available\")\n</code></pre>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/#connection-pooling","title":"Connection Pooling","text":"<pre><code>import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\nclass OptimizedOpenToCloseAPI(OpenToCloseAPI):\n    \"\"\"Optimized client with connection pooling.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # Configure session with connection pooling\n        self.session = requests.Session()\n\n        # Retry strategy\n        retry_strategy = Retry(\n            total=3,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504],\n        )\n\n        # HTTP adapter with connection pooling\n        adapter = HTTPAdapter(\n            pool_connections=20,\n            pool_maxsize=20,\n            max_retries=retry_strategy\n        )\n\n        self.session.mount(\"http://\", adapter)\n        self.session.mount(\"https://\", adapter)\n</code></pre>"},{"location":"deployment/#caching","title":"Caching","text":"<pre><code>import redis\nimport json\nfrom functools import wraps\n\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\ndef cache_result(expiration=300):\n    \"\"\"Cache API results with expiration.\"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Create cache key\n            cache_key = f\"{func.__name__}:{hash(str(args) + str(kwargs))}\"\n\n            # Try to get from cache\n            cached_result = redis_client.get(cache_key)\n            if cached_result:\n                return json.loads(cached_result)\n\n            # Execute function and cache result\n            result = func(*args, **kwargs)\n            redis_client.setex(\n                cache_key,\n                expiration,\n                json.dumps(result)\n            )\n\n            return result\n        return wrapper\n    return decorator\n\n# Usage\n@cache_result(expiration=600)  # Cache for 10 minutes\ndef get_contacts():\n    client = OpenToCloseAPI()\n    return client.contacts.list_contacts()\n</code></pre>"},{"location":"deployment/#batch-operations","title":"Batch Operations","text":"<pre><code>async def process_contacts_batch(contact_data_list, batch_size=50):\n    \"\"\"Process contacts in batches for better performance.\"\"\"\n\n    results = []\n    client = OpenToCloseAPI()\n\n    for i in range(0, len(contact_data_list), batch_size):\n        batch = contact_data_list[i:i + batch_size]\n\n        # Process batch\n        batch_results = []\n        for contact_data in batch:\n            try:\n                result = client.contacts.create_contact(contact_data)\n                batch_results.append(result)\n            except Exception as e:\n                logger.error(f\"Failed to create contact: {e}\")\n                batch_results.append(None)\n\n        results.extend(batch_results)\n\n        # Small delay between batches to avoid rate limits\n        await asyncio.sleep(0.1)\n\n    return results\n</code></pre> <p>This deployment guide provides comprehensive coverage of production deployment scenarios for applications using the Open To Close API Python Client. </p>"},{"location":"examples/","title":"Comprehensive Examples","text":"<p>Real-world usage examples for the Open To Close API client.</p>"},{"location":"examples/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic CRUD Operations</li> <li>Working with Properties</li> <li>Managing Property Relationships</li> <li>Error Handling Patterns</li> <li>Bulk Operations</li> <li>Advanced Filtering</li> <li>Real Estate Workflow Examples</li> </ul>"},{"location":"examples/#basic-crud-operations","title":"Basic CRUD Operations","text":""},{"location":"examples/#complete-contact-management","title":"Complete Contact Management","text":"<pre><code>from open_to_close_api import OpenToCloseAPI, NotFoundError, ValidationError\n\nclient = OpenToCloseAPI()\n\n# Create a new contact\ndef create_contact_example():\n    contact_data = {\n        \"first_name\": \"Sarah\",\n        \"last_name\": \"Johnson\",\n        \"email\": \"sarah.johnson@example.com\",\n        \"phone\": \"+1555123456\",\n        \"notes\": \"Potential first-time buyer\"\n    }\n\n    try:\n        contact = client.contacts.create_contact(contact_data)\n        print(f\"Created contact: {contact['first_name']} {contact['last_name']} (ID: {contact['id']})\")\n        return contact\n    except ValidationError as e:\n        print(f\"Invalid contact data: {e}\")\n        return None\n\n# Update contact information\ndef update_contact_example(contact_id: int):\n    updates = {\n        \"phone\": \"+1555987654\",\n        \"notes\": \"Approved for mortgage pre-qualification\"\n    }\n\n    try:\n        updated_contact = client.contacts.update_contact(contact_id, updates)\n        print(f\"Updated contact {contact_id}\")\n        return updated_contact\n    except NotFoundError:\n        print(f\"Contact {contact_id} not found\")\n    except ValidationError as e:\n        print(f\"Invalid update data: {e}\")\n\n# Retrieve and display contact details\ndef get_contact_details(contact_id: int):\n    try:\n        contact = client.contacts.retrieve_contact(contact_id)\n        print(f\"Contact Details:\")\n        print(f\"  Name: {contact['first_name']} {contact['last_name']}\")\n        print(f\"  Email: {contact['email']}\")\n        print(f\"  Phone: {contact['phone']}\")\n        return contact\n    except NotFoundError:\n        print(f\"Contact {contact_id} not found\")\n        return None\n</code></pre>"},{"location":"examples/#working-with-properties","title":"Working with Properties","text":""},{"location":"examples/#property-lifecycle-management","title":"Property Lifecycle Management","text":"<pre><code>def create_property_listing():\n    \"\"\"Create a new property listing with complete information.\"\"\"\n\n    property_data = {\n        \"address\": \"456 Oak Avenue\",\n        \"city\": \"Springfield\",\n        \"state\": \"CA\",\n        \"zip_code\": \"90210\",\n        \"property_type\": \"single_family\",\n        \"bedrooms\": 4,\n        \"bathrooms\": 3,\n        \"square_feet\": 2500,\n        \"lot_size\": 0.25,\n        \"listing_price\": 750000,\n        \"status\": \"active\",\n        \"description\": \"Beautiful family home in desirable neighborhood\"\n    }\n\n    try:\n        property = client.properties.create_property(property_data)\n        print(f\"Created property listing: {property['address']} (ID: {property['id']})\")\n        return property\n    except ValidationError as e:\n        print(f\"Invalid property data: {e}\")\n        return None\n\ndef update_property_status(property_id: int, new_status: str):\n    \"\"\"Update property status (e.g., pending, sold, withdrawn).\"\"\"\n\n    try:\n        updated_property = client.properties.update_property(property_id, {\n            \"status\": new_status\n        })\n        print(f\"Property {property_id} status updated to: {new_status}\")\n        return updated_property\n    except NotFoundError:\n        print(f\"Property {property_id} not found\")\n    except ValidationError as e:\n        print(f\"Invalid status: {e}\")\n\ndef search_properties_by_criteria():\n    \"\"\"Search for properties based on specific criteria.\"\"\"\n\n    search_params = {\n        \"city\": \"Springfield\",\n        \"min_price\": 500000,\n        \"max_price\": 800000,\n        \"bedrooms__gte\": 3,  # 3 or more bedrooms\n        \"property_type\": \"single_family\",\n        \"status\": \"active\"\n    }\n\n    try:\n        properties = client.properties.list_properties(params=search_params)\n        print(f\"Found {len(properties)} properties matching criteria:\")\n\n        for prop in properties:\n            print(f\"  {prop['address']} - ${prop['listing_price']:,} ({prop['bedrooms']}br/{prop['bathrooms']}ba)\")\n\n        return properties\n    except Exception as e:\n        print(f\"Error searching properties: {e}\")\n        return []\n</code></pre>"},{"location":"examples/#managing-property-relationships","title":"Managing Property Relationships","text":""},{"location":"examples/#complete-property-documentation","title":"Complete Property Documentation","text":"<pre><code>def manage_property_documents(property_id: int):\n    \"\"\"Comprehensive property document management.\"\"\"\n\n    # Add multiple document types\n    documents_to_create = [\n        {\n            \"title\": \"Purchase Agreement\",\n            \"description\": \"Signed purchase agreement\",\n            \"document_type\": \"contract\",\n            \"file_url\": \"https://docs.example.com/purchase_agreement.pdf\"\n        },\n        {\n            \"title\": \"Property Inspection Report\",\n            \"description\": \"Professional inspection results\",\n            \"document_type\": \"inspection\",\n            \"file_url\": \"https://docs.example.com/inspection_report.pdf\"\n        },\n        {\n            \"title\": \"Appraisal Report\",\n            \"description\": \"Professional property appraisal\",\n            \"document_type\": \"appraisal\",\n            \"file_url\": \"https://docs.example.com/appraisal.pdf\"\n        }\n    ]\n\n    created_documents = []\n\n    for doc_data in documents_to_create:\n        try:\n            document = client.property_documents.create_property_document(property_id, doc_data)\n            created_documents.append(document)\n            print(f\"Added document: {document['title']}\")\n        except ValidationError as e:\n            print(f\"Failed to add document '{doc_data['title']}': {e}\")\n\n    return created_documents\n\ndef track_property_communications(property_id: int):\n    \"\"\"Track all communications related to a property.\"\"\"\n\n    # Add email records\n    emails = [\n        {\n            \"subject\": \"Property Showing Scheduled\",\n            \"body\": \"Your property showing is scheduled for tomorrow at 2 PM.\",\n            \"to_email\": \"client@example.com\",\n            \"from_email\": \"agent@realty.com\",\n            \"sent_date\": \"2024-01-15T10:00:00Z\"\n        },\n        {\n            \"subject\": \"Offer Received\",\n            \"body\": \"We have received an offer on your property. Please review the attached documents.\",\n            \"to_email\": \"seller@example.com\",\n            \"from_email\": \"agent@realty.com\",\n            \"sent_date\": \"2024-01-16T14:30:00Z\"\n        }\n    ]\n\n    for email_data in emails:\n        try:\n            email = client.property_emails.create_property_email(property_id, email_data)\n            print(f\"Logged email: {email['subject']}\")\n        except ValidationError as e:\n            print(f\"Failed to log email: {e}\")\n\n    # Add notes\n    notes = [\n        {\n            \"title\": \"Showing Feedback\",\n            \"content\": \"Buyers were very interested, especially in the kitchen renovation.\",\n            \"note_type\": \"showing\"\n        },\n        {\n            \"title\": \"Price Adjustment\",\n            \"content\": \"Reduced listing price by $10,000 based on market analysis.\",\n            \"note_type\": \"pricing\"\n        }\n    ]\n\n    for note_data in notes:\n        try:\n            note = client.property_notes.create_property_note(property_id, note_data)\n            print(f\"Added note: {note['title']}\")\n        except ValidationError as e:\n            print(f\"Failed to add note: {e}\")\n\ndef manage_property_tasks(property_id: int):\n    \"\"\"Create and manage tasks for property workflow.\"\"\"\n\n    tasks = [\n        {\n            \"title\": \"Schedule Professional Photography\",\n            \"description\": \"Arrange for high-quality listing photos\",\n            \"due_date\": \"2024-01-20\",\n            \"priority\": \"high\",\n            \"assigned_to\": \"marketing_team\"\n        },\n        {\n            \"title\": \"Order Home Inspection\",\n            \"description\": \"Schedule comprehensive home inspection\",\n            \"due_date\": \"2024-01-25\",\n            \"priority\": \"medium\",\n            \"assigned_to\": \"transaction_coordinator\"\n        },\n        {\n            \"title\": \"Prepare Listing Materials\",\n            \"description\": \"Create MLS listing and marketing materials\",\n            \"due_date\": \"2024-01-22\",\n            \"priority\": \"high\",\n            \"assigned_to\": \"listing_agent\"\n        }\n    ]\n\n    for task_data in tasks:\n        try:\n            task = client.property_tasks.create_property_task(property_id, task_data)\n            print(f\"Created task: {task['title']} (Due: {task['due_date']})\")\n        except ValidationError as e:\n            print(f\"Failed to create task: {e}\")\n</code></pre>"},{"location":"examples/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"examples/#robust-error-handling","title":"Robust Error Handling","text":"<pre><code>from open_to_close_api import (\n    OpenToCloseAPIError,\n    AuthenticationError,\n    ValidationError,\n    NotFoundError,\n    RateLimitError,\n    ServerError,\n    NetworkError\n)\nimport time\n\ndef robust_api_call_with_retry(func, *args, max_retries=3, **kwargs):\n    \"\"\"Execute API call with retry logic for transient errors.\"\"\"\n\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n\n        except RateLimitError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt  # Exponential backoff\n                print(f\"Rate limit hit, waiting {wait_time} seconds...\")\n                time.sleep(wait_time)\n                continue\n            raise\n\n        except NetworkError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 1\n                print(f\"Network error, retrying in {wait_time} second...\")\n                time.sleep(wait_time)\n                continue\n            raise\n\n        except ServerError as e:\n            if attempt &lt; max_retries - 1 and e.status_code &gt;= 500:\n                wait_time = 2 ** attempt\n                print(f\"Server error, retrying in {wait_time} seconds...\")\n                time.sleep(wait_time)\n                continue\n            raise\n\n        except (AuthenticationError, ValidationError, NotFoundError):\n            # Don't retry these errors\n            raise\n\n    return None\n\ndef safe_contact_operations():\n    \"\"\"Demonstrate safe contact operations with comprehensive error handling.\"\"\"\n\n    # Safe contact creation\n    def create_contact_safely(contact_data):\n        try:\n            return robust_api_call_with_retry(\n                client.contacts.create_contact, \n                contact_data\n            )\n        except AuthenticationError:\n            print(\"Authentication failed. Check your API key.\")\n            return None\n        except ValidationError as e:\n            print(f\"Invalid contact data: {e}\")\n            return None\n        except Exception as e:\n            print(f\"Unexpected error creating contact: {e}\")\n            return None\n\n    # Safe contact retrieval\n    def get_contact_safely(contact_id):\n        try:\n            return robust_api_call_with_retry(\n                client.contacts.retrieve_contact, \n                contact_id\n            )\n        except NotFoundError:\n            print(f\"Contact {contact_id} does not exist\")\n            return None\n        except Exception as e:\n            print(f\"Error retrieving contact {contact_id}: {e}\")\n            return None\n\n    # Example usage\n    contact_data = {\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"email\": \"test@example.com\"\n    }\n\n    contact = create_contact_safely(contact_data)\n    if contact:\n        retrieved_contact = get_contact_safely(contact['id'])\n        return retrieved_contact\n\n    return None\n</code></pre>"},{"location":"examples/#bulk-operations","title":"Bulk Operations","text":""},{"location":"examples/#efficient-bulk-data-management","title":"Efficient Bulk Data Management","text":"<pre><code>def bulk_import_contacts(contacts_data: list):\n    \"\"\"Import multiple contacts with progress tracking and error handling.\"\"\"\n\n    successful_imports = []\n    failed_imports = []\n\n    total_contacts = len(contacts_data)\n\n    for i, contact_data in enumerate(contacts_data, 1):\n        try:\n            contact = client.contacts.create_contact(contact_data)\n            successful_imports.append(contact)\n            print(f\"Progress: {i}/{total_contacts} - Created: {contact['first_name']} {contact['last_name']}\")\n\n        except ValidationError as e:\n            failed_imports.append({\n                \"data\": contact_data,\n                \"error\": str(e)\n            })\n            print(f\"Progress: {i}/{total_contacts} - Failed: {contact_data.get('email', 'Unknown')} - {e}\")\n\n        except RateLimitError:\n            print(\"Rate limit hit, waiting...\")\n            time.sleep(5)\n            # Retry this contact\n            try:\n                contact = client.contacts.create_contact(contact_data)\n                successful_imports.append(contact)\n                print(f\"Progress: {i}/{total_contacts} - Created (retry): {contact['first_name']} {contact['last_name']}\")\n            except Exception as retry_error:\n                failed_imports.append({\n                    \"data\": contact_data,\n                    \"error\": str(retry_error)\n                })\n\n    print(f\"\\nBulk import completed:\")\n    print(f\"  Successful: {len(successful_imports)}\")\n    print(f\"  Failed: {len(failed_imports)}\")\n\n    if failed_imports:\n        print(\"\\nFailed imports:\")\n        for failure in failed_imports:\n            print(f\"  {failure['data'].get('email', 'Unknown')}: {failure['error']}\")\n\n    return successful_imports, failed_imports\n\ndef export_all_properties():\n    \"\"\"Export all properties with pagination.\"\"\"\n\n    all_properties = []\n    page_size = 100\n    offset = 0\n\n    while True:\n        try:\n            properties = client.properties.list_properties(params={\n                \"limit\": page_size,\n                \"offset\": offset\n            })\n\n            if not properties:\n                break\n\n            all_properties.extend(properties)\n            print(f\"Fetched {len(properties)} properties (Total: {len(all_properties)})\")\n\n            if len(properties) &lt; page_size:\n                break\n\n            offset += page_size\n\n        except Exception as e:\n            print(f\"Error fetching properties at offset {offset}: {e}\")\n            break\n\n    print(f\"Export completed: {len(all_properties)} total properties\")\n    return all_properties\n</code></pre>"},{"location":"examples/#real-estate-workflow-examples","title":"Real Estate Workflow Examples","text":""},{"location":"examples/#complete-transaction-workflow","title":"Complete Transaction Workflow","text":"<pre><code>def complete_listing_workflow():\n    \"\"\"Demonstrate a complete property listing workflow.\"\"\"\n\n    # 1. Create the property listing\n    property_data = {\n        \"address\": \"789 Elm Street\",\n        \"city\": \"Beverly Hills\",\n        \"state\": \"CA\",\n        \"zip_code\": \"90210\",\n        \"property_type\": \"single_family\",\n        \"bedrooms\": 5,\n        \"bathrooms\": 4,\n        \"square_feet\": 3200,\n        \"listing_price\": 1250000,\n        \"status\": \"coming_soon\"\n    }\n\n    try:\n        property = client.properties.create_property(property_data)\n        property_id = property['id']\n        print(f\"\u2713 Created property listing: {property['address']}\")\n    except Exception as e:\n        print(f\"\u2717 Failed to create property: {e}\")\n        return None\n\n    # 2. Add the listing agent and team\n    try:\n        # Associate contacts with the property\n        agent_contact = client.property_contacts.create_property_contact(property_id, {\n            \"contact_id\": 123,  # Assuming existing agent contact\n            \"relationship_type\": \"listing_agent\"\n        })\n        print(\"\u2713 Associated listing agent\")\n    except Exception as e:\n        print(f\"\u2717 Failed to associate agent: {e}\")\n\n    # 3. Create initial tasks\n    initial_tasks = [\n        {\n            \"title\": \"Property Preparation\",\n            \"description\": \"Clean, stage, and prepare property for photos\",\n            \"due_date\": \"2024-02-01\",\n            \"priority\": \"high\"\n        },\n        {\n            \"title\": \"Professional Photography\",\n            \"description\": \"Schedule and complete professional photos\",\n            \"due_date\": \"2024-02-03\",\n            \"priority\": \"high\"\n        },\n        {\n            \"title\": \"MLS Entry\",\n            \"description\": \"Enter property into MLS system\",\n            \"due_date\": \"2024-02-05\",\n            \"priority\": \"medium\"\n        }\n    ]\n\n    for task_data in initial_tasks:\n        try:\n            task = client.property_tasks.create_property_task(property_id, task_data)\n            print(f\"\u2713 Created task: {task['title']}\")\n        except Exception as e:\n            print(f\"\u2717 Failed to create task: {e}\")\n\n    # 4. Add initial documentation\n    try:\n        listing_agreement = client.property_documents.create_property_document(property_id, {\n            \"title\": \"Listing Agreement\",\n            \"description\": \"Signed listing agreement with seller\",\n            \"document_type\": \"contract\"\n        })\n        print(\"\u2713 Added listing agreement document\")\n    except Exception as e:\n        print(f\"\u2717 Failed to add document: {e}\")\n\n    # 5. Create initial notes\n    try:\n        initial_note = client.property_notes.create_property_note(property_id, {\n            \"title\": \"Listing Strategy\",\n            \"content\": \"Luxury market positioning, emphasis on location and recent renovations\",\n            \"note_type\": \"strategy\"\n        })\n        print(\"\u2713 Added initial strategy notes\")\n    except Exception as e:\n        print(f\"\u2717 Failed to add note: {e}\")\n\n    print(f\"\\n\ud83c\udfe0 Property listing workflow completed for: {property['address']}\")\n    return property_id\n\ndef buyer_inquiry_workflow(property_id: int, buyer_contact_id: int):\n    \"\"\"Handle a buyer inquiry and showing request.\"\"\"\n\n    # 1. Log the inquiry email\n    try:\n        inquiry_email = client.property_emails.create_property_email(property_id, {\n            \"subject\": \"Showing Request\",\n            \"body\": \"Interested buyer would like to schedule a showing this weekend\",\n            \"to_email\": \"agent@realty.com\",\n            \"from_email\": \"buyer@example.com\"\n        })\n        print(\"\u2713 Logged buyer inquiry email\")\n    except Exception as e:\n        print(f\"\u2717 Failed to log email: {e}\")\n\n    # 2. Associate buyer with property\n    try:\n        buyer_association = client.property_contacts.create_property_contact(property_id, {\n            \"contact_id\": buyer_contact_id,\n            \"relationship_type\": \"potential_buyer\"\n        })\n        print(\"\u2713 Associated buyer with property\")\n    except Exception as e:\n        print(f\"\u2717 Failed to associate buyer: {e}\")\n\n    # 3. Create showing task\n    try:\n        showing_task = client.property_tasks.create_property_task(property_id, {\n            \"title\": \"Schedule Property Showing\",\n            \"description\": f\"Coordinate showing with buyer (Contact ID: {buyer_contact_id})\",\n            \"due_date\": \"2024-02-10\",\n            \"priority\": \"high\"\n        })\n        print(\"\u2713 Created showing task\")\n    except Exception as e:\n        print(f\"\u2717 Failed to create task: {e}\")\n\n    # 4. Add buyer interest note\n    try:\n        interest_note = client.property_notes.create_property_note(property_id, {\n            \"title\": \"Buyer Interest\",\n            \"content\": f\"Buyer (Contact ID: {buyer_contact_id}) expressed strong interest, requesting weekend showing\",\n            \"note_type\": \"buyer_activity\"\n        })\n        print(\"\u2713 Added buyer interest note\")\n    except Exception as e:\n        print(f\"\u2717 Failed to add note: {e}\")\n\n    print(\"\ud83d\udc65 Buyer inquiry workflow completed\")\n\n# Example usage\nif __name__ == \"__main__\":\n    # Complete workflow example\n    property_id = complete_listing_workflow()\n    if property_id:\n        buyer_inquiry_workflow(property_id, 456)  # Assuming buyer contact ID 456\n</code></pre>"},{"location":"examples/#advanced-filtering-and-search","title":"Advanced Filtering and Search","text":""},{"location":"examples/#complex-query-examples","title":"Complex Query Examples","text":"<pre><code>def advanced_property_search():\n    \"\"\"Demonstrate advanced property search capabilities.\"\"\"\n\n    # Search for luxury properties\n    luxury_params = {\n        \"listing_price__gte\": 1000000,\n        \"square_feet__gte\": 3000,\n        \"bedrooms__gte\": 4,\n        \"property_type\": \"single_family\",\n        \"status\": \"active\"\n    }\n\n    luxury_properties = client.properties.list_properties(params=luxury_params)\n    print(f\"Found {len(luxury_properties)} luxury properties\")\n\n    # Search by location and price range\n    location_params = {\n        \"city__in\": \"Beverly Hills,Malibu,Santa Monica\",\n        \"listing_price__range\": \"500000,2000000\",\n        \"status\": \"active\"\n    }\n\n    location_properties = client.properties.list_properties(params=location_params)\n    print(f\"Found {len(location_properties)} properties in target locations\")\n\n    # Search contacts by criteria\n    contact_params = {\n        \"email__contains\": \"@gmail.com\",\n        \"created_date__gte\": \"2024-01-01\",\n        \"tags__contains\": \"first_time_buyer\"\n    }\n\n    filtered_contacts = client.contacts.list_contacts(params=contact_params)\n    print(f\"Found {len(filtered_contacts)} Gmail contacts created this year\")\n\ndef generate_market_report():\n    \"\"\"Generate a comprehensive market report.\"\"\"\n\n    # Get active listings by price range\n    price_ranges = [\n        (0, 500000),\n        (500000, 750000),\n        (750000, 1000000),\n        (1000000, float('inf'))\n    ]\n\n    report = {}\n\n    for min_price, max_price in price_ranges:\n        params = {\n            \"status\": \"active\",\n            \"listing_price__gte\": min_price\n        }\n\n        if max_price != float('inf'):\n            params[\"listing_price__lt\"] = max_price\n            range_name = f\"${min_price:,} - ${max_price:,}\"\n        else:\n            range_name = f\"${min_price:,}+\"\n\n        try:\n            properties = client.properties.list_properties(params=params)\n            report[range_name] = {\n                \"count\": len(properties),\n                \"properties\": properties\n            }\n            print(f\"{range_name}: {len(properties)} active listings\")\n        except Exception as e:\n            print(f\"Error fetching {range_name}: {e}\")\n\n    return report\n</code></pre> <p>These examples demonstrate the full capabilities of the Open To Close API client, from basic operations to complex real estate workflows. Use these patterns as templates for your own implementations. </p>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<pre><code>pip install open-to-close-api\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>For development or to get the latest features:</p> <pre><code>git clone https://github.com/theperry-group/open-to-close-api.git\ncd open-to-close-api\npip install -e .\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>To contribute to the project:</p> <pre><code># Clone the repository\ngit clone https://github.com/theperry-group/open-to-close-api.git\ncd open-to-close-api\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements-dev.txt\npip install -e .\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<pre><code>import open_to_close_api\nprint(open_to_close_api.__version__)\n</code></pre>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":""},{"location":"installation/#api-key-configuration","title":"API Key Configuration","text":"<p>Set your Open To Close API key as an environment variable:</p> <p>Linux/macOS: <pre><code>export OPEN_TO_CLOSE_API_KEY=\"your_api_key_here\"\n</code></pre></p> <p>Windows: <pre><code>set OPEN_TO_CLOSE_API_KEY=your_api_key_here\n</code></pre></p>"},{"location":"installation/#using-env-file","title":"Using .env File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>OPEN_TO_CLOSE_API_KEY=your_actual_api_key_here\n</code></pre> <p>The client will automatically load this when you initialize it:</p> <pre><code>from open_to_close_api import OpenToCloseAPI\n\n# Automatically loads from environment or .env file\nclient = OpenToCloseAPI()\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get started with basic usage</li> <li>API Reference - Explore all available methods</li> <li>Examples - See comprehensive usage examples </li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with the Open To Close API in 5 minutes.</p>"},{"location":"quickstart/#1-installation","title":"1. Installation","text":"<pre><code>pip install open-to-close-api\n</code></pre>"},{"location":"quickstart/#2-set-your-api-key","title":"2. Set Your API Key","text":"<pre><code>export OPEN_TO_CLOSE_API_KEY=\"your_api_key_here\"\n</code></pre> <p>Or create a <code>.env</code> file: <pre><code>OPEN_TO_CLOSE_API_KEY=your_actual_api_key_here\n</code></pre></p>"},{"location":"quickstart/#3-initialize-the-client","title":"3. Initialize the Client","text":"<pre><code>from open_to_close_api import OpenToCloseAPI\n\n# Initialize with environment variable\nclient = OpenToCloseAPI()\n\n# Or provide API key directly\n# client = OpenToCloseAPI(api_key=\"your_api_key\")\n</code></pre>"},{"location":"quickstart/#4-basic-usage-examples","title":"4. Basic Usage Examples","text":""},{"location":"quickstart/#list-contacts","title":"List Contacts","text":"<pre><code>try:\n    contacts = client.contacts.list_contacts()\n    print(f\"Found {len(contacts)} contacts\")\n\n    for contact in contacts[:5]:  # Show first 5\n        print(f\"- {contact.get('first_name')} {contact.get('last_name')}\")\n\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"quickstart/#create-a-new-contact","title":"Create a New Contact","text":"<pre><code>new_contact = {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1234567890\"\n}\n\ntry:\n    contact = client.contacts.create_contact(new_contact)\n    print(f\"Created contact with ID: {contact['id']}\")\nexcept Exception as e:\n    print(f\"Error creating contact: {e}\")\n</code></pre>"},{"location":"quickstart/#retrieve-a-specific-contact","title":"Retrieve a Specific Contact","text":"<pre><code>try:\n    contact = client.contacts.retrieve_contact(123)\n    print(f\"Contact: {contact['first_name']} {contact['last_name']}\")\n    print(f\"Email: {contact['email']}\")\nexcept Exception as e:\n    print(f\"Error retrieving contact: {e}\")\n</code></pre>"},{"location":"quickstart/#list-properties","title":"List Properties","text":"<pre><code>try:\n    properties = client.properties.list_properties()\n    print(f\"Found {len(properties)} properties\")\n\n    for prop in properties[:3]:  # Show first 3\n        print(f\"- {prop.get('address')}\")\n\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"quickstart/#work-with-property-documents","title":"Work with Property Documents","text":"<pre><code>property_id = 123\n\ntry:\n    # List documents for a property\n    documents = client.property_documents.list_property_documents(property_id)\n    print(f\"Property has {len(documents)} documents\")\n\n    # Create a new document\n    new_doc = {\n        \"title\": \"Purchase Agreement\",\n        \"description\": \"Initial purchase agreement draft\",\n        \"document_type\": \"contract\"\n    }\n\n    doc = client.property_documents.create_property_document(property_id, new_doc)\n    print(f\"Created document with ID: {doc['id']}\")\n\nexcept Exception as e:\n    print(f\"Error with documents: {e}\")\n</code></pre>"},{"location":"quickstart/#5-error-handling","title":"5. Error Handling","text":"<p>The client provides specific exception types for different error conditions:</p> <pre><code>from open_to_close_api import (\n    OpenToCloseAPI,\n    AuthenticationError,\n    ValidationError,\n    NotFoundError,\n    RateLimitError\n)\n\nclient = OpenToCloseAPI()\n\ntry:\n    contact = client.contacts.retrieve_contact(999999)\nexcept NotFoundError:\n    print(\"Contact not found\")\nexcept AuthenticationError:\n    print(\"Check your API key\")\nexcept ValidationError as e:\n    print(f\"Invalid data: {e}\")\nexcept RateLimitError:\n    print(\"Rate limit exceeded, please wait\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"quickstart/#6-available-resources","title":"6. Available Resources","text":"<p>The client provides access to all Open To Close API resources:</p> <pre><code># Core resources\nclient.agents           # Agent management\nclient.contacts         # Contact management  \nclient.properties       # Property management\nclient.teams           # Team management\nclient.tags            # Tag management\nclient.users           # User management\n\n# Property-related resources\nclient.property_contacts    # Property-contact relationships\nclient.property_documents   # Property documents\nclient.property_emails      # Property emails\nclient.property_notes       # Property notes\nclient.property_tasks       # Property tasks\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Complete method documentation</li> <li>Examples - More comprehensive examples</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"quickstart/#need-help","title":"Need Help?","text":"<ul> <li>Check the troubleshooting guide for common issues</li> <li>Review the complete examples for advanced usage patterns</li> <li>Refer to the API reference for detailed method documentation </li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues and solutions when using the Open To Close API client.</p>"},{"location":"troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Authentication Issues</li> <li>Connection Problems</li> <li>Data Validation Errors</li> <li>Rate Limiting</li> <li>Common API Errors</li> <li>Performance Issues</li> <li>Debugging Tips</li> </ul>"},{"location":"troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"troubleshooting/#api-key-not-working","title":"API Key Not Working","text":"<p>Problem: Getting <code>AuthenticationError</code> when making requests.</p> <p>Solutions:</p> <ol> <li> <p>Check API Key Format: <pre><code># Ensure your API key is properly formatted\nclient = OpenToCloseAPI(api_key=\"your_actual_api_key_here\")\n</code></pre></p> </li> <li> <p>Verify Environment Variable: <pre><code># Check if environment variable is set\necho $OPEN_TO_CLOSE_API_KEY\n\n# Set it if missing\nexport OPEN_TO_CLOSE_API_KEY=\"your_api_key_here\"\n</code></pre></p> </li> <li> <p>Check .env File: <pre><code># Make sure .env file has correct format\nOPEN_TO_CLOSE_API_KEY=your_actual_api_key_here\n</code></pre></p> </li> <li> <p>Verify API Key Status:</p> </li> <li>Contact Open To Close support to verify your API key is active</li> <li>Check if your account has the necessary permissions</li> </ol>"},{"location":"troubleshooting/#permission-denied-errors","title":"Permission Denied Errors","text":"<p>Problem: API key works but getting permission errors on specific endpoints.</p> <p>Solutions: - Verify your API key has the required scopes/permissions - Contact support to check your account's access levels - Some endpoints may require additional authentication</p>"},{"location":"troubleshooting/#connection-problems","title":"Connection Problems","text":""},{"location":"troubleshooting/#network-connectivity-issues","title":"Network Connectivity Issues","text":"<p>Problem: Getting <code>NetworkError</code> or connection timeouts.</p> <p>Solutions:</p> <ol> <li> <p>Check Internet Connection: <pre><code># Test basic connectivity\nping api.opentoclose.com\n</code></pre></p> </li> <li> <p>Firewall/Proxy Issues: <pre><code># If behind corporate firewall, configure proxy\nimport requests\n\nproxies = {\n    'http': 'http://proxy.company.com:8080',\n    'https': 'https://proxy.company.com:8080'\n}\n\n# You may need to modify the client to use proxies\n</code></pre></p> </li> <li> <p>DNS Resolution: <pre><code># Test DNS resolution\nnslookup api.opentoclose.com\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#ssl-certificate-issues","title":"SSL Certificate Issues","text":"<p>Problem: SSL verification errors.</p> <p>Solutions: <pre><code># Temporary workaround (not recommended for production)\nimport ssl\nimport urllib3\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n# Better solution: Update certificates\n# pip install --upgrade certifi\n</code></pre></p>"},{"location":"troubleshooting/#data-validation-errors","title":"Data Validation Errors","text":""},{"location":"troubleshooting/#invalid-field-formats","title":"Invalid Field Formats","text":"<p>Problem: Getting <code>ValidationError</code> for seemingly correct data.</p> <p>Common Issues and Fixes:</p> <ol> <li> <p>Phone Number Format: <pre><code># Wrong\ncontact_data = {\"phone\": \"555-123-4567\"}\n\n# Correct\ncontact_data = {\"phone\": \"+15551234567\"}\n</code></pre></p> </li> <li> <p>Email Validation: <pre><code># Ensure valid email format\nimport re\n\ndef validate_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n</code></pre></p> </li> <li> <p>Date Formats: <pre><code># Use ISO format for dates\ntask_data = {\n    \"due_date\": \"2024-12-31\",  # YYYY-MM-DD\n    \"created_at\": \"2024-01-15T10:30:00Z\"  # ISO 8601\n}\n</code></pre></p> </li> <li> <p>Required Fields: <pre><code># Always include required fields\ncontact_data = {\n    \"first_name\": \"John\",    # Required\n    \"last_name\": \"Doe\",      # Required\n    \"email\": \"john@example.com\"  # Required\n    # Optional fields can be omitted\n}\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#data-type-mismatches","title":"Data Type Mismatches","text":"<p>Problem: Passing wrong data types.</p> <p>Solutions: <pre><code># Ensure correct types\nproperty_data = {\n    \"bedrooms\": 3,              # int, not \"3\"\n    \"bathrooms\": 2.5,           # float for half baths\n    \"listing_price\": 500000,    # int/float, not \"$500,000\"\n    \"square_feet\": 2200,        # int, not \"2,200\"\n    \"active\": True              # bool, not \"true\"\n}\n</code></pre></p>"},{"location":"troubleshooting/#rate-limiting","title":"Rate Limiting","text":""},{"location":"troubleshooting/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<p>Problem: Getting <code>RateLimitError</code> when making many requests.</p> <p>Solutions:</p> <ol> <li> <p>Implement Retry Logic: <pre><code>import time\nfrom open_to_close_api import RateLimitError\n\ndef api_call_with_retry(func, *args, max_retries=3, **kwargs):\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n        except RateLimitError as e:\n            if attempt &lt; max_retries - 1:\n                wait_time = 2 ** attempt  # Exponential backoff\n                print(f\"Rate limited, waiting {wait_time} seconds...\")\n                time.sleep(wait_time)\n            else:\n                raise\n</code></pre></p> </li> <li> <p>Add Delays Between Requests: <pre><code>import time\n\nfor contact in contacts_to_create:\n    client.contacts.create_contact(contact)\n    time.sleep(0.1)  # 100ms delay between requests\n</code></pre></p> </li> <li> <p>Batch Operations: <pre><code># Process in smaller batches\nbatch_size = 10\nfor i in range(0, len(data), batch_size):\n    batch = data[i:i + batch_size]\n    process_batch(batch)\n    time.sleep(1)  # Pause between batches\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#common-api-errors","title":"Common API Errors","text":""},{"location":"troubleshooting/#404-not-found-errors","title":"404 Not Found Errors","text":"<p>Problem: <code>NotFoundError</code> when trying to access resources.</p> <p>Common Causes: - Resource ID doesn't exist - Resource was deleted - Typo in resource ID</p> <p>Solutions: <pre><code>def safe_retrieve(resource_type, resource_id):\n    try:\n        if resource_type == \"contact\":\n            return client.contacts.retrieve_contact(resource_id)\n        elif resource_type == \"property\":\n            return client.properties.retrieve_property(resource_id)\n    except NotFoundError:\n        print(f\"{resource_type} {resource_id} not found\")\n        return None\n</code></pre></p>"},{"location":"troubleshooting/#422-validation-errors","title":"422 Validation Errors","text":"<p>Problem: Server returns validation errors for request data.</p> <p>Solutions: 1. Check Required Fields: <pre><code># Get validation details from error\ntry:\n    client.contacts.create_contact(data)\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n    print(f\"Error details: {e.response.json()}\")\n</code></pre></p> <ol> <li>Field Length Limits: <pre><code># Ensure fields don't exceed maximum length\ncontact_data = {\n    \"first_name\": \"John\"[:50],  # Truncate if needed\n    \"notes\": description[:1000]  # Limit notes length\n}\n</code></pre></li> </ol>"},{"location":"troubleshooting/#500-server-errors","title":"500 Server Errors","text":"<p>Problem: <code>ServerError</code> from API.</p> <p>Solutions: 1. Retry the Request: <pre><code>import time\n\nmax_retries = 3\nfor attempt in range(max_retries):\n    try:\n        result = client.contacts.list_contacts()\n        break\n    except ServerError:\n        if attempt &lt; max_retries - 1:\n            time.sleep(2 ** attempt)\n        else:\n            raise\n</code></pre></p> <ol> <li>Check API Status:</li> <li>Verify API service status</li> <li>Contact support if errors persist</li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-response-times","title":"Slow Response Times","text":"<p>Problem: API calls taking too long.</p> <p>Solutions:</p> <ol> <li> <p>Use Pagination: <pre><code># Don't fetch all records at once\nparams = {\"limit\": 50, \"offset\": 0}\ncontacts = client.contacts.list_contacts(params=params)\n</code></pre></p> </li> <li> <p>Filter Results: <pre><code># Only fetch what you need\nparams = {\n    \"created_after\": \"2024-01-01\",\n    \"status\": \"active\"\n}\nproperties = client.properties.list_properties(params=params)\n</code></pre></p> </li> <li> <p>Parallel Processing: <pre><code>import concurrent.futures\n\ndef process_contact(contact_id):\n    return client.contacts.retrieve_contact(contact_id)\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    results = list(executor.map(process_contact, contact_ids))\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#memory-usage","title":"Memory Usage","text":"<p>Problem: High memory usage when processing large datasets.</p> <p>Solutions: <pre><code>def process_large_dataset():\n    offset = 0\n    batch_size = 100\n\n    while True:\n        # Process in chunks\n        params = {\"limit\": batch_size, \"offset\": offset}\n        batch = client.contacts.list_contacts(params=params)\n\n        if not batch:\n            break\n\n        # Process batch\n        for contact in batch:\n            process_contact(contact)\n\n        offset += batch_size\n\n        # Optional: garbage collection\n        import gc\n        gc.collect()\n</code></pre></p>"},{"location":"troubleshooting/#debugging-tips","title":"Debugging Tips","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>import logging\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger('open_to_close_api')\nlogger.setLevel(logging.DEBUG)\n\n# Your API calls will now show detailed information\nclient = OpenToCloseAPI()\n</code></pre>"},{"location":"troubleshooting/#inspect-requestresponse-data","title":"Inspect Request/Response Data","text":"<pre><code>def debug_api_call():\n    try:\n        response = client.contacts.list_contacts()\n        print(f\"Success: {len(response)} contacts retrieved\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n        if hasattr(e, 'response'):\n            print(f\"Status Code: {e.response.status_code}\")\n            print(f\"Response: {e.response.text}\")\n</code></pre>"},{"location":"troubleshooting/#test-with-minimal-data","title":"Test with Minimal Data","text":"<pre><code># Start with minimal data to isolate issues\nminimal_contact = {\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test@example.com\"\n}\n\ntry:\n    contact = client.contacts.create_contact(minimal_contact)\n    print(\"Basic contact creation works\")\nexcept Exception as e:\n    print(f\"Basic contact creation failed: {e}\")\n</code></pre>"},{"location":"troubleshooting/#check-api-response-format","title":"Check API Response Format","text":"<pre><code>def inspect_response_format():\n    try:\n        contacts = client.contacts.list_contacts(params={\"limit\": 1})\n        if contacts:\n            print(\"Sample contact structure:\")\n            import json\n            print(json.dumps(contacts[0], indent=2))\n    except Exception as e:\n        print(f\"Error: {e}\")\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you continue to experience issues:</p> <ol> <li>Check this troubleshooting guide for similar problems</li> <li>Review the API documentation for correct usage</li> <li>Check the examples for working code patterns</li> <li>Enable debug logging to get more information</li> <li>Contact support with:</li> <li>Your code example</li> <li>Complete error message</li> <li>Debug logs</li> <li>API client version</li> </ol>"},{"location":"troubleshooting/#common-error-codes","title":"Common Error Codes","text":"Code Error Type Description Solution 400 Bad Request Invalid request format Check request syntax 401 Unauthorized Invalid API key Verify API key 403 Forbidden Insufficient permissions Contact support 404 Not Found Resource doesn't exist Check resource ID 422 Validation Error Invalid data Check field formats 429 Rate Limited Too many requests Implement retry logic 500 Server Error API server issue Retry or contact support"},{"location":"troubleshooting/#version-compatibility","title":"Version Compatibility","text":"<p>Make sure you're using compatible versions:</p> <pre><code># Check your version\npip show open-to-close-api\n\n# Update to latest version\npip install --upgrade open-to-close-api\n</code></pre> <p>Refer to the changelog for version-specific information and breaking changes. </p>"}]}